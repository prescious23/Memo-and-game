{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KamoheloMokoena\\\\Desktop\\\\memobook\\\\src\\\\pages\\\\Games.jsx\";\nimport React, { Component } from 'react';\nimport Food from '../Food';\nimport Snake from '../Snake';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst InitialState = {\n  food: getRandomCoordinates(),\n  speed: 200,\n  direction: 'RIGHT',\n  snakeDots: [[0, 0], [2, 0]]\n};\n\nclass Games extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = InitialState;\n\n    this.onkeydown = e => {\n      e = e || window.event;\n\n      switch (e.keyCode) {\n        case 38:\n          this.setState({\n            direction: 'UP'\n          });\n          break;\n\n        case 40:\n          this.setState({\n            direction: 'DOWN'\n          });\n          break;\n\n        case 37:\n          this.setState({\n            direction: 'LEFT'\n          });\n          break;\n\n        case 39:\n          this.setState({\n            direction: 'RIGHT'\n          });\n          break;\n      }\n    };\n\n    this.moveSnake = () => {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n\n      switch (this.state.direction) {\n        case 'RIGHT':\n          head = [head[0] + 2, head[1]];\n          break;\n\n        case 'LEFT':\n          head = [head[0] - 2, head[1]];\n          break;\n\n        case 'DOWN':\n          head = [head[0], head[1] + 2];\n          break;\n\n        case 'UP':\n          head = [head[0], head[1] - 2];\n          break;\n      }\n\n      dots.push(head);\n      dots.shift();\n      this.setState({\n        snakeDots: dots\n      });\n    };\n  }\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onkeydown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] == dot[0] && head[1] == dot[1]) {\n        this.onGameOver;\n      }\n    });\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n\n    if (head[0] == food[0] && head[1] == food[1]) {\n      this.enlargeSnake();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake\n    });\n  }\n\n  onGameOver() {\n    alert(`Game Over. Your snake length is ${this.state.snakeDots.length}`);\n    this.setState(InitialState);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-area\",\n      children: [/*#__PURE__*/_jsxDEV(Snake, {\n        snakeDots: this.state.snakeDots\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Food, {\n        dot: this.state.food\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Games;","map":{"version":3,"sources":["C:/Users/KamoheloMokoena/Desktop/memobook/src/pages/Games.jsx"],"names":["React","Component","Food","Snake","getRandomCoordinates","min","max","x","Math","floor","random","y","InitialState","food","speed","direction","snakeDots","Games","state","onkeydown","e","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","componentDidMount","setInterval","document","componentDidUpdate","checkIfOutOfBorders","checkIfCollapsed","onGameOver","snake","pop","forEach","dot","checkIfEat","enlargeSnake","newSnake","unshift","alert","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Food from '../Food';\r\nimport Snake from '../Snake';\r\n\r\nconst getRandomCoordinates= () => {\r\n    let min= 1;\r\n    let max= 98;\r\n    let x = Math.floor((Math.random() * (max-min +1) + min) / 2) *2;\r\n    let y = Math.floor((Math.random() * (max-min +1) + min) /2) *2;\r\n    return [x,y]  \r\n}\r\n\r\nconst InitialState = {\r\n    food: getRandomCoordinates(),\r\n    speed: 200,\r\n    direction: 'RIGHT',\r\n    snakeDots: \r\n    [ \r\n        [0,0],[2,0]\r\n    ]\r\n}\r\n\r\nclass Games extends Component{\r\n    state = InitialState;\r\n\r\n        componentDidMount(){\r\n        setInterval(this.moveSnake, this.state.speed);\r\n        document.onkeydown = this.onkeydown;\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.checkIfOutOfBorders()\r\n        this.checkIfCollapsed();\r\n    }\r\n\r\n    onkeydown = (e) => {\r\n        e = e || window.event;\r\n        switch (e.keyCode){\r\n            case 38:\r\n                this.setState({direction: 'UP'});\r\n            break;\r\n\r\n            case 40:\r\n                this.setState({direction: 'DOWN'});\r\n            break;\r\n            case 37:\r\n            this.setState({direction: 'LEFT'});\r\n            break;\r\n            case 39:\r\n            this.setState({direction: 'RIGHT'});\r\n            break;\r\n        }\r\n    }\r\n\r\n        moveSnake = () => {\r\n            let dots = [...this.state.snakeDots];\r\n            let head = dots[dots.length -1];\r\n\r\n            switch (this.state.direction){\r\n                \r\n                    case 'RIGHT':\r\n                    head =[head[0] + 2, head[1]];\r\n                    break;  \r\n                    case 'LEFT':\r\n                    head =[head[0] - 2, head[1]];\r\n                    break;  \r\n                    case 'DOWN':\r\n                    head =[head[0], head[1] + 2];\r\n                    break;  \r\n                    case 'UP':\r\n                    head =[head[0], head[1] -2];\r\n                    break;  \r\n\r\n            }\r\n            dots.push(head);\r\n            dots.shift();\r\n            this.setState({\r\n                snakeDots: dots\r\n            })\r\n\r\n        }\r\n        checkIfOutOfBorders(){\r\n            let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n            if(head[0] >= 100 || head[1] >= 100 || head[0] <0 || head[1] <0){\r\n                this.onGameOver();\r\n            }\r\n        }\r\n\r\n        checkIfCollapsed(){\r\n            let snake = [...this.state.snakeDots];\r\n            let head = snake[snake.length -1];\r\n            snake.pop();\r\n            snake.forEach(dot => {\r\n                if(head[0] == dot[0] && head[1] == dot[1]){\r\n                    this.onGameOver;\r\n                }\r\n            })\r\n        }\r\n\r\n        checkIfEat(){\r\n            let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n            let food = this.state.food;\r\n            if(head[0] == food[0] && head[1] == food[1]){\r\n                this.enlargeSnake();\r\n            }\r\n\r\n        }\r\n\r\n        enlargeSnake(){\r\n            let newSnake = [...this.state.snakeDots];\r\n            newSnake.unshift([])\r\n            this.setState({snakeDots: newSnake})\r\n        }\r\n\r\n        onGameOver(){\r\n            alert(`Game Over. Your snake length is ${this.state.snakeDots.length}`);\r\n            this.setState(InitialState)\r\n        }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"game-area\">\r\n                {/* <h1>we are gaming</h1> */}\r\n                <Snake snakeDots={this.state.snakeDots}/>\r\n                <Food dot={this.state.food}/>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Games;"]},"metadata":{},"sourceType":"module"}