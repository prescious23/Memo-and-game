{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KamoheloMokoena\\\\Desktop\\\\memobook\\\\src\\\\pages\\\\Memo.jsx\";\nimport React from \"react\"; // class Model{\n//    constructor() {\n//       this.notes = []\n//    }\n// }\n// var model = new Model();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Memo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      userInput: '',\n      color: 'skyblue',\n      alert: ''\n    };\n  } //creates list of added notes\n\n\n  render() {\n    let listAddedNotes = Model.notes.map(function (note) {\n      if (note.id != null) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: note.bgColor + `note-box alert col-md-11`,\n            children: note.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-1 text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"delete btn btn-default\",\n              onClick: this.handledeleteNote.bind(this, note.id),\n              children: \"\\xD7 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 16\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 16\n        }, this);\n      }\n    }, this); //renders page content\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"panel panel-default\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              for: \"add-note\",\n              children: \"Type your note Here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"add-note\",\n              className: \"form-control\",\n              type: \"text\",\n              value: this.state.userInput,\n              placeholder: \"Add note here\",\n              onChange: this.handleuserInput.bind(this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: this.handleAddNote.bind(this),\n            children: \"Save Note \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"alerts\",\n            children: this.state.alert\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-center\",\n        children: \"Recently added notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 10\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 64\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: model.notes.length === 0 ? /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"No new notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 38\n        }, this) : listAddedNotes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 8\n    }, this);\n  } //This code updates the state of the user input\n\n\n  handleuserInput(s) {\n    this.setState({\n      userInput: s.target.value\n    });\n  } //Adding new note\n\n\n  handleAddNote() {\n    if (this.state.userInput != '') {\n      AbortController.addNote({\n        content: this.state.userInput,\n        bgColor: this.state.color\n      });\n    } //Updating component state\n\n\n    this.setState({\n      userInput: ''\n    }); //show note is successfully added\n\n    if (this.state.userInput != '') {\n      this.showAddAlert();\n    }\n  } //Delete a note\n\n\n  handledeleteNote(id) {\n    controller.deleteNote(id);\n    this.showDeleteAlert();\n  }\n\n  showAddAlert() {\n    this.setState({\n      alert: 'Your note is added!'\n    });\n    let hideAlert = setTimeout(this.hideAlert.bind(this), 1000);\n  }\n\n  showDeleteAlert() {\n    this.setState({\n      alert: 'Note is deleted!'\n    });\n    let hideAlert = setTimeout(this.hideAlert.bind(this), 1000);\n  }\n\n  hideAlert() {\n    this.setState({\n      alert: ''\n    });\n  }\n\n} // ReactDOM.render(<View/>, document.querySelector('#memo'));\n// class Controller{\n//    addNote(newNote){\n//       newNote.id = (model.notes.length + 1);\n//       model.notes.push(newNote);\n//    }\n// deleteNote(id){\n//    let new_notes = [];\n//    for (let i=0; i< model.notes.length; i++){\n//       if(model.notes[i]['id'] == id){\n//       }\n//       else {\n//          new_notes.push(model.notes[i]);\n//       }\n//    }\n//       model.notes = new_notes;\n//    }\n// }\n// var controller = new Controller();","map":{"version":3,"sources":["C:/Users/KamoheloMokoena/Desktop/memobook/src/pages/Memo.jsx"],"names":["React","Memo","Component","constructor","state","userInput","color","alert","render","listAddedNotes","Model","notes","map","note","id","bgColor","content","handledeleteNote","bind","handleuserInput","handleAddNote","model","length","s","setState","target","value","AbortController","addNote","showAddAlert","controller","deleteNote","showDeleteAlert","hideAlert","setTimeout"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\n// class Model{\r\n//    constructor() {\r\n//       this.notes = []\r\n//    }\r\n// }\r\n\r\n// var model = new Model();\r\n\r\nexport default class Memo extends React.Component{\r\n   constructor() {\r\n      super();\r\n      this.state = {\r\n         userInput: '',\r\n         color: 'skyblue',\r\n         alert: ''\r\n      };\r\n   }\r\n\r\n   //creates list of added notes\r\n   render (){\r\n      let listAddedNotes = Model.notes.map(function(note){\r\n         if(note.id != null){\r\n            return(\r\n               <div>\r\n                  <div className={note.bgColor + `note-box alert col-md-11`}>\r\n                  {note.content}\r\n               </div>\r\n               <div className=\"col-md-1 text-center\">\r\n                  <button className=\"delete btn btn-default\" onClick={this.handledeleteNote.bind(this, note.id)}>&times; </button></div>\r\n               </div>\r\n            )\r\n         }\r\n  }, this);\r\n\r\n  //renders page content\r\nreturn <div>\r\n   <div className=\"panel panel-default\">\r\n      <div className=\"panel-body\">\r\n         <form className=\"form-group\">\r\n            <label for=\"add-note\">Type your note Here</label>\r\n            <input \r\n            id=\"add-note\"\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            value={this.state.userInput}\r\n            placeholder=\"Add note here\"\r\n            onChange={this.handleuserInput.bind(this)}\r\n            />\r\n          </form>\r\n\r\n            <button className=\"btn btn-success\" onClick={this.handleAddNote.bind(this)}>Save Note </button>\r\n            <span className=\"alerts\">{this.state.alert}</span>\r\n      </div>\r\n   </div>\r\n         <h3 className=\"text-center\">Recently added notes</h3> <hr></hr>\r\n      <div>\r\n         {model.notes.length === 0 ? <h3>No new notes</h3> : listAddedNotes}\r\n      </div>\r\n</div>\r\n}\r\n\r\n//This code updates the state of the user input\r\nhandleuserInput(s)\r\n   {\r\n   this.setState({userInput: s.target.value})\r\n}\r\n\r\n//Adding new note\r\nhandleAddNote(){\r\n   if(this.state.userInput != ''){\r\n      AbortController.addNote({\r\n         content:this.state.userInput,\r\n         bgColor:this.state.color\r\n      });\r\n   }\r\n\r\n   //Updating component state\r\n   this.setState({\r\n      userInput: ''\r\n   });\r\n\r\n\r\n//show note is successfully added\r\n      if(this.state.userInput != ''){\r\n         this.showAddAlert();\r\n      }\r\n}\r\n\r\n//Delete a note\r\n   handledeleteNote(id){\r\n      controller.deleteNote(id);\r\n      this.showDeleteAlert();\r\n   }\r\n\r\n   showAddAlert(){\r\n      this.setState({alert: 'Your note is added!'})\r\n      let hideAlert = setTimeout(this.hideAlert.bind(this), 1000);\r\n   }\r\n\r\n   showDeleteAlert(){\r\n      this.setState({alert: 'Note is deleted!'})\r\n      let hideAlert = setTimeout(this.hideAlert.bind(this), 1000);\r\n   }\r\n\r\n   hideAlert(){\r\n      this.setState({alert: ''})\r\n   }\r\n\r\n}\r\n\r\n// ReactDOM.render(<View/>, document.querySelector('#memo'));\r\n\r\n// class Controller{\r\n//    addNote(newNote){\r\n//       newNote.id = (model.notes.length + 1);\r\n//       model.notes.push(newNote);\r\n//    }\r\n\r\n\r\n// deleteNote(id){\r\n//    let new_notes = [];\r\n//    for (let i=0; i< model.notes.length; i++){\r\n//       if(model.notes[i]['id'] == id){\r\n\r\n//       }\r\n//       else {\r\n//          new_notes.push(model.notes[i]);\r\n//       }\r\n//    }\r\n//       model.notes = new_notes;\r\n//    }\r\n// }\r\n// var controller = new Controller();\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}